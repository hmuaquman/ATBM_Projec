ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;  

DROP TABLE ADMIN.DANGKY;
DROP TABLE ADMIN.KHMO;
DROP TABLE ADMIN.SINHVIEN;
DROP TABLE ADMIN.PHANCONG;
DROP TABLE ADMIN.HOCPHAN;
DROP TABLE ADMIN.DONVI;
DROP TABLE ADMIN.NHANSU;
CREATE TABLE ADMIN.NHANSU (
    MANV VARCHAR2(20) PRIMARY KEY,
    HOTEN VARCHAR2(50),
    PHAI VARCHAR2(10),
    NGSINH DATE,
    PHUCAP NUMBER(10, 2),
    DT CHAR(10),
    VAITRO VARCHAR2(50),
    MADV VARCHAR2(20)
);
/
CREATE TABLE ADMIN.SINHVIEN (
    MASV VARCHAR2(20) PRIMARY KEY,
    HOTEN VARCHAR2(50),
    PHAI VARCHAR2(10),
    NGSINH DATE,
    DCHI VARCHAR2(100),
    DT CHAR(10),
    MACT VARCHAR2(20),
    MANGANH VARCHAR2(20),
    SOTCTL NUMBER(3),
    DTBTL NUMBER(4, 2)
);
/
CREATE TABLE ADMIN.DONVI (
    MADV VARCHAR2(20) PRIMARY KEY,
    TENDV VARCHAR2(50),
    TRGDV VARCHAR2(20),
    FOREIGN KEY (TRGDV) REFERENCES ADMIN.NHANSU(MANV)
);
/
CREATE TABLE ADMIN.HOCPHAN (
    MAHP VARCHAR2(20) PRIMARY KEY,
    TENHP VARCHAR2(50),
    SOTC NUMBER(2),
    STLT NUMBER(2),
    STTH NUMBER(2),
    SOSVTD NUMBER(3),
    MADV VARCHAR2(20),
    FOREIGN KEY (MADV) REFERENCES ADMIN.DONVI(MADV)
);
/
CREATE TABLE ADMIN.KHMO (
    MAHP VARCHAR2(20),
    HK VARCHAR2(10),
    NAM VARCHAR2(4),
    MACT VARCHAR2(20),
    PRIMARY KEY (MAHP, HK, NAM, MACT),
    FOREIGN KEY (MAHP) REFERENCES ADMIN.HOCPHAN(MAHP)
);
/
CREATE TABLE ADMIN.PHANCONG (
    MAGV VARCHAR2(20),
    MAHP VARCHAR2(20),
    HK VARCHAR2(10),
    NAM VARCHAR2(4),
    MACT VARCHAR2(20),
    PRIMARY KEY (MAGV,MAHP, HK, NAM, MACT),
    FOREIGN KEY(MAGV) REFERENCES ADMIN.NHANSU(MANV),
    FOREIGN KEY (MAHP,HK,NAM,MACT) REFERENCES ADMIN.KHMO(MAHP,HK,NAM,MACT)
)
/
CREATE TABLE ADMIN.DANGKY (
    MASV VARCHAR(20),
    MAGV VARCHAR2(20),
    MAHP VARCHAR2(20),
    HK VARCHAR2(10),
    NAM VARCHAR2(4),
    MACT VARCHAR2(20),
    DIEMTHI NUMBER(4,2),
    DIEMQT  NUMBER(4,2),
    DIEMCK NUMBER(4,2),
    DIEMTK  NUMBER(4,2),
    PRIMARY KEY (MASV, MAGV,MAHP, HK, NAM, MACT),
    FOREIGN KEY (MASV) REFERENCES ADMIN.SINHVIEN(MASV),
    FOREIGN KEY (MAGV,MAHP,HK,NAM,MACT) REFERENCES ADMIN.PHANCONG(MAGV,MAHP,HK,NAM,MACT)
)
SET SERVEROUTPUT ON;
--TRIGGER Kiểm tra số lượng của nhân sự
CREATE OR REPLACE TRIGGER CHECK_SL_NHANSU
BEFORE INSERT ON ADMIN.NHANSU
FOR EACH ROW
DECLARE SOLUONG INT;
BEGIN
SELECT COUNT(*) INTO SOLUONG FROM ADMIN.NHANSU WHERE VAITRO=:NEW.VAITRO;
IF :NEW.VAITRO='Nhân viên cơ bản' THEN
    IF SOLUONG>=10 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Số lượng nhân viên cơ bản đã đạt tối đa.');
        DBMS_OUTPUT.PUT_LINE('Số lượng nhân viên cơ bản đã đạt tối đa.');
    END IF;
ELSIF :NEW.VAITRO = 'Giảng viên' THEN
    IF SOLUONG >= 80 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Số lượng giảng viên đã đạt tối đa.');
        DBMS_OUTPUT.PUT_LINE('Số lượng giảng viên đã đạt tối đa.');
    END IF;
ELSIF :NEW.VAITRO = 'Giáo vụ' THEN
    IF SOLUONG >= 10 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Số lượng giáo vụ đã đạt tối đa.');
        DBMS_OUTPUT.PUT_LINE('Số lượng giáo vụ đã đạt tối đa.');
    END IF;
ELSIF :NEW.VAITRO = 'Trưởng đơn vị' THEN
    IF SOLUONG >= 6 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Số lượng trưởng đơn vị đã đạt tối đa.');
        DBMS_OUTPUT.PUT_LINE('Số lượng trưởng đơn vị đã đạt tối đa.');
    END IF;
ELSIF :NEW.VAITRO = 'Trưởng Khoa' THEN
    IF SOLUONG >= 1 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Trưởng khoa chỉ có 1 người.');
        DBMS_OUTPUT.PUT_LINE('Trưởng khoa chỉ có 1 người.');
    END IF;
END IF;
END;
-- TRIGGER Kiểm tra số lượng sinh viên đăng ký không được vượt tối đa số lượng sinh viên quy định của học phần.
CREATE OR REPLACE TRIGGER CHECK_SL_DANGKY
BEFORE INSERT ON ADMIN.DANGKY
FOR EACH ROW
DECLARE
    SOLUONGTD INT;
    SOLUONGDK INT;
BEGIN
    -- Lấy số lượng sinh viên tối đa từ bảng HOCPHAN
    SELECT SOSVTD INTO SOLUONGTD 
    FROM ADMIN.HOCPHAN 
    WHERE MAHP = :NEW.MAHP;

    -- Đếm số lượng sinh viên đã đăng ký trong học phần
    SELECT COUNT(*) INTO SOLUONGDK 
    FROM ADMIN.DANGKY DK 
    JOIN ADMIN.HOCPHAN HP ON DK.MAHP = HP.MAHP 
    WHERE DK.MAHP = :NEW.MAHP;

    -- Kiểm tra nếu số lượng sinh viên đăng ký đã đạt tối đa
    IF SOLUONGDK >= SOLUONGTD THEN
        RAISE_APPLICATION_ERROR(-20002, 'Số lượng đăng ký đã đạt tối đa.');
    END IF;
END;
/
--TRIGGER ràng buộc sinh viên chỉ được đăng kí các học phần mở.
CREATE OR REPLACE TRIGGER CONS_DANGKYMON
BEFORE INSERT ON ADMIN.DANGKY
FOR EACH ROW
DECLARE
    hp_exists INT;
BEGIN
    -- Kiểm tra xem mã học phần có tồn tại trong KHMO hay không
    SELECT COUNT(*)
    INTO hp_exists
    FROM ADMIN.KHMO
    WHERE MAHP = :NEW.MAHP;

    IF hp_exists = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Học phần không mở, không được phép đăng kí');
    END IF;
END;
/
